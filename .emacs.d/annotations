(("/Users/hbshim/Dropbox/Workspace/elisp/practice.el" nil "210d5bbf9167ee86d78762bad7d0db65") ("/usr/local/Cellar/emacs-mac/emacs-27.1-mac-8.1/share/emacs/27.1/lisp/fileloop.el.gz" ((5545 5548 "actually, nothing to finish because we are not working on any file" "nil") (5175 5180 "need to get a new file if \"fileloop\" is fresh, or \"fileloop\" is finished (BAD NAMING!!!! It's better be \"FILELOOP-FINISHED\" rather than \"FILE-FINISHED\"), or \"scan\" finds nothing interesting" "while") (4522 4560 "FIRST ENDPOINT" "(set-buffer (find-file-noselect next))") (4495 4518 "t when \"next\" is already visited or gotten or novisit is nil; in this case, make that buffer active; otherwise, create a temp buffer and return the file name \"next\"" "(not (and new novisit))") (4492 4494 "Recall that THEN is just one expr but everything after that are all ELSE... (it can be several exprs)" "if") (3834 3876 "the 'next'-buffer was not modified" "(not (verify-visited-file-modtime buffer))") (3681 3684 "t if the \"next\" file is not previously visited" "new") (3653 3668 "non-nil if 'next' buffer exists already" "get-file-buffer") (3494 3505 "when there is no next file, kill the temp buffer and emit an error to finish" "unless next") (3460 3480 "this is a signal. see info:elisp#Generators" "iter-end-of-sequence") (3413 3422 "When BODY returns normally, ‘iter-next’ signals ‘iter-end-of-sequence’ with BODY’s result as its condition data. See info:elisp#Generators" "iter-next") (3246 3264 "called by 'fileloop-continue'; to call this 'fileloop-next-file', the iterator 'fileloop--iterator' should be already defined and visible" "fileloop-next-file") (3204 3233 "becomes 'nil' in 'fileloop-continue'" "fileloop--freshly-initialized") (3088 3093 "this is when 'files' is a single file" "files") (3043 3077 "iterate and pops up a file from the list 'files' of files" "(fileloop--list-to-iterator files)") (2956 2974 "iterator of a stream of file names" "fileloop--iterator") (2314 2333 "literally, initialize by setting the variables and does nothing else" "fileloop-initialize") (2051 2061 "the iterator pause here" "iter-yield") (1991 2001 "defines a generator function (returns an iterator object) See info elisp > Control Structures > Generators" "iter-defun") (5555 5588 "get the next file as 'new'. \"new\" is nil if the current file is the last one" "(setq new (fileloop-next-file t))") (5626 5637 "\"*next-file*\"" "temp buffer") (5999 6000 "now, \"fileloop\" is not fresh and \"file\" is not finished and \"scan\" found that \"new\" has something interesting" ")") (8461 8476 "documentation says not to use this - it istead gives a loop of replacement example" "perform-replace") (8485 8486 "QUERY-FLAG" "t") (8487 8488 "REGEXP-FLAG" "t") (8489 8498 "DELIMITED-FLAG" "delimited") (8499 8502 "REPEAT-COUNT" "nil") (8503 8526 "MAP" "multi-query-replace-map")) "9c1a396be45fd6a10185b84bc942e068") ("/Users/hbshim/Dropbox/Workspace/Math/.dir-locals.el" nil "60c96c6762f1301cb8c7b6ba40a462d4") ("/Users/hbshim/.emacs.d/elpa/auctex-12.3.1/tex.el" ((105005 105019 "called by TeX-run-style-hooks" "TeX-load-style") (105021 105026 "the path of the desired style el-file WITHOUT extension (.el or .elc)" "style") (105108 105141 "if style is added already, do nothing" "(assoc style TeX-style-hook-list)") (105167 105222 "splits a path into directory and file parts; return the index of the match, nil if there is no match" "(string-match \"\\\\`\\\\(.+[/\\\\]\\\\)\\\\([^/\\\\]*\\\\)\\\\'\" style)") (105247 105250 "directory" "dir") (105307 105312 "name of the style el-file" "style") (105794 105814 "now, \"style\" is only a filename without the directory part. call this function again with this." "TeX-load-style style") (106023 106027 "path name" "name") (106070 106086 "absolute file path" "expand-file-name") (106087 106092 "file name" "style") (106112 106131 "called by TeX-load-style" "TeX-load-style-file") (106133 106137 "absolute path with file WITHOUT extension (.el or .elc) is supplied" "file") (106258 106289 "if el-file is newer than elc-file then compile the newer el then load it. if it can't be compiled, then just load the el-file" "(file-newer-than-file-p el elc)") (106557 106578 "if elc is newer and readable then load it" "(file-readable-p elc)") (106604 106624 "if elc is newer but not readable but el is readable, then load the el" "(file-readable-p el)") (110933 110952 "called by TeX-update-style" "TeX-run-style-hooks") (112899 112920 "obviously called from TeX-update-style; to run an extra style file, add-hook, for eg, (TeX-run-style-hooks \"mysymb\") to this" "TeX-update-style-hook") (112993 113009 "called by TeX-normal-mode" "TeX-update-style")) "96dcfb5e9406d6250c488b7077248a5c") ("/Users/hbshim/.emacs.d/snippets/emacs-lisp-mode/package" nil "53d970456dec0c8f2dd911d955d73182") ("/Users/hbshim/Dropbox/Workspace/emacs_init_pkg/.emacs" nil "e4079d99a22dc9246a111d00c1da004e") ("/Users/hbshim/.emacs" nil "482d23f671c4baf31e9cd53bbb9bf039") ("/Users/hbshim/.emacs.d/elpa/auctex-12.3.1/tex-buf.el" ((31162 31181 "TeX-command-default" "TeX-command-default") (30938 30967 "this is the sentinel as a function defined below" "TeX-command-sequence-sentinel") (30838 30854 "Return the sentinel, eg. TeX-TeX-sentinel, TeX-index-sentinel, TeX-BibTeX-sentinel," "process-sentinel") (30807 30836 "as a variable (not as a function defined below)" "TeX-command-sequence-sentinel") (30229 30261 "TeX-command-Show will be the last cmd to run" "(equal command TeX-command-Show)") (30032 30093 "# of total runnings of cmds exceeds the max" "(>= TeX-command-sequence-count TeX-command-sequence-max-runs)") (29694 29786 "# of repeats of the same cmd exceeds the max" "(>= TeX-command-sequence-count-same-command
	    TeX-command-sequence-max-runs-same-command)") (29513 29546 "Last (previous) command run" "TeX-command-sequence-last-command") (29477 29503 "Counter for the total runs" "TeX-command-sequence-count") (29428 29467 "Counter for the runs of the same command" "TeX-command-sequence-count-same-command") (29348 29402 "THIS ACTUALLY RUNS CMD! The last 0 indicates the confirmation is supressed. The process starts running and remains to adjust counters and setting the sentinel  =========================================================================" "(TeX-command cmd TeX-command-sequence-file-function 0)") (29340 29341 "=================== cond-form ends here =================== " ")") (29245 29299 "get the file name" "(funcall TeX-command-sequence-file-function nil nil t)") (28828 28847 "Guess the next command to be run" "TeX-command-default") (28711 28730 "command is indirectly given through a function" "(functionp command)") (28664 28692 "defines 'TeX-command-sequence-command' as the list of remaining commands" "TeX-command-sequence-command") (28616 28631 "list of multiple commands" "(listp command)") (28529 28546 "single command" "(stringp command)") (28515 28516 "=================== cond-form starts here =================== " "(") (28491 28494 "THIS let SCOPE LASTS UNTIL THE END" "let") (28361 28395 "a function that returns a file where the command will work on." "TeX-command-sequence-file-function") (27003 27023 "TeX-command-sequence" "TeX-command-sequence") (3078 3094 "just non-nil, eg. t, would be enough" "override-confirm") (3005 3052 "will return a NAME from the variable TeX-command-list, eg. LaTeX, BibTeX ... See the definition." "(TeX-command-query (TeX-master-file nil nil t))") (2993 3004 "(TeX-command NAME FILE &optional OVERRIDE-CONFIRM) Run command NAME on the file returned by calling FILE. NAME is a cda of an element in 'TeX-command-list' in ‘tex.el’" "TeX-command") (32936 32953 "will return a NAME from the variable TeX-command-list, eg. LaTeX, BibTeX ..." "TeX-command-query") (32955 32959 "the name of the source file on which COMMAND will act on" "name") (72726 72755 "TeX-command-sequence-sentinel" "TeX-command-sequence-sentinel") (73089 73091 "\"when\" would be better because there is no else clause. If error occurs, this function will return nil that effectively stops TeX-command-sequence. Recall (from the def of the function 'TeX-command-sequence') that TeX-command-sequence-command is being popped out for each turn." "if") (73211 73242 "no error" "(TeX-error-report-has-errors-p)") (73251 73286 "no remaining cmd" "(null TeX-command-sequence-command)") (73315 73343 "COMMAND" "TeX-command-sequence-command") (73344 73347 "RESET" "nil") (73354 73388 "FILE-FN a function of zero arguments returning the current
filename." "TeX-command-sequence-file-function") (92820 92840 "The argument is a TeX-command specified in TeX-command-list. With any other value the function ‘TeX-command-default’ is used to determine the command to run, until a stopping condition is met." "TeX-command-sequence") (92854 92855 "4 is the code for one prefix argument. See my note on \"prefix arguments\"." "4")) "5a1a2a1edd0028244a1529767247bf01"))